#!/usr/bin/env python
#$ -j Y
#$ -cwd
#$ -V


import os
opj = os.path.join
from datetime import datetime
import numpy as np
import sys

# MATPLOTLIB STUFF
import matplotlib as mpl

import pandas as pd
#
import figure_finder as ff

import ast
import getopt
import warnings
import json
warnings.filterwarnings('ignore')

def main(argv):

    """
---------------------------------------------------------------------------------------------------
ff_print_code

Usage:
    ff_print_code [arguments] [options]
    CLI to call the function print_matching_code_file
    Prints the code used to generate the figure matching the search terms (i.e., tags, 
    exlude, idx).

Arguments:
    -t|--tag        can be a single word, or a list separated by commas (with no whitespace)           
    -e|--exclude    can be a single word, or a list separated by commas (with no whitespace)           
    -i|--idx        if multiple figures match the pattern, select this figure    

Example:
    ff_print_code -t blah,bloop -e hello
    # if more than one file matches this pattern then you will get a list of file names with an 
    # associated id, use idx to specify which one you want
    ff_print_code -t blah,bloop -e hello -i 0
---------------------------------------------------------------------------------------------------
"""

    fig_tags    = None
    exclude     = None
    idx         = []

    try:
        opts = getopt.getopt(argv,"ghs:t:e:i:",["help", "tag=", "exclude=", "idx="])[0]
    except getopt.GetoptError:
        print(main.__doc__)
        sys.exit(2)
    
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            print(main.__doc__)
            sys.exit()
        elif opt in ("-t", "--tag"):
            fig_tags = arg.split(',')
        elif opt in ("-e", "--exclude"):
            exclude = arg.split(',')
        elif opt in ("-i", "--idx"):
            idx = int(arg)
    ff.print_matching_code_file(fig_tags, exclude=exclude, idx=idx)

if __name__ == "__main__":
    main(sys.argv[1:])
